CREATE OR REPLACE PACKAGE VALIDADORES AS FUNCTION VALIDACNPJ( NRCNPJ NUMBER ) RETURN NUMBER;
FUNCTION VALIDACPF( NRCPF NUMERIC ) RETURN NUMERIC;
PROCEDURE GET_TOTAL_NOTA ( NUMERO_NOTA IN INTEGER );
END VALIDADORES;
/

CREATE OR REPLACE PACKAGE BODY VALIDADORES AS 
FUNCTION VALIDACNPJ( NRCNPJ NUMBER ) RETURN NUMBER IS
BEGIN
DECLARE 
   TYPE ARRAYCNPJ IS VARRAY(14) OF NUMBER(1); 
   CNPJ ARRAYCNPJ := ARRAYCNPJ();
   TYPE ARRAYVALIDA IS VARRAY(12) OF NUMBER(1); 
   VALIDA ARRAYVALIDA := ARRAYVALIDA();
   TYPE ARRAYVALIDA2 IS VARRAY(13) OF NUMBER(1); 
   VALIDA2 ARRAYVALIDA2 := ARRAYVALIDA2();   
   CNPJSTRING VARCHAR(14);
   SOMA   NUMBER(5) := 0;
   DIGITO NUMBER(5) := 0;
   SOMA2   NUMBER(5) := 0;
   DIGITO2 NUMBER(5) := 0;
BEGIN
    
    CNPJSTRING := LPAD(TO_CHAR( NRCNPJ ), 14, '0');	
    
	CNPJ.EXTEND(14);
	
	FOR I IN 1..14 LOOP
	   CNPJ(I) := SUBSTR( CNPJSTRING,I,1);
	END LOOP;
	
    VALIDA.EXTEND(12);
    VALIDA(1) := 6;
    VALIDA(2) := 7; 
    VALIDA(3) := 8; 
    VALIDA(4) := 9;
    VALIDA(5) := 2; 
    VALIDA(6) := 3; 
    VALIDA(7) := 4; 
    VALIDA(8) := 5; 
    VALIDA(9) := 6; 
    VALIDA(10) := 7; 
    VALIDA(11) := 8; 
    VALIDA(12) := 9;
	
	VALIDA2.EXTEND(13);
    VALIDA2(1) := 5;
    VALIDA2(2) := 6; 
    VALIDA2(3) := 7; 
    VALIDA2(4) := 8;
    VALIDA2(5) := 9; 
    VALIDA2(6) := 2; 
    VALIDA2(7) := 3; 
    VALIDA2(8) := 4; 
    VALIDA2(9) := 5; 
    VALIDA2(10) := 6; 
    VALIDA2(11) := 7; 
    VALIDA2(12) := 8;
	VALIDA2(13) := 9;

    FOR I IN 1..12 LOOP
	    SOMA := SOMA + (CNPJ(I) * VALIDA(I));
    END LOOP; 	
	
	DIGITO := MOD(SOMA,11);
	
	IF DIGITO > 9 THEN
	    DIGITO := 0;
	END IF;
	
	IF DIGITO = CNPJ(13) THEN
	    
	    FOR I IN 1..12 LOOP
	        SOMA2 := SOMA2 + (CNPJ(I) * (VALIDA2(I)));
        END LOOP;
	
	    SOMA2 := SOMA2 + (DIGITO * 9);
	
	    DIGITO2 := MOD(SOMA2,11);
	
	    IF DIGITO2 > 9 THEN
	        DIGITO2 := 0;
	    END IF;
		
		IF DIGITO2 = CNPJ(14) THEN
		    RETURN 1;
		ELSE
		    RETURN 0;
		END IF;

        DBMS_OUTPUT.PUT_LINE('Valor: ' || DIGITO2);	
		
	ELSE 
	
	    RETURN 0;
	
	END IF;
	
END;
END;

FUNCTION VALIDACPF( NRCPF NUMERIC ) RETURN NUMERIC IS
BEGIN
DECLARE 
   TYPE ARRAYCPF IS VARRAY(11) OF NUMBER(1); 
   CPF ARRAYCPF := ARRAYCPF(); 
   CPFSTRING VARCHAR(11);
   DIGITO   NUMBER(5) := 0;
BEGIN 
    -- CRIA UMA STRING COM 11 POSIÃ‡Ã•ES FIXAS E COM ZEROS A ESQUERDA
	CPFSTRING := LPAD(TO_CHAR( NRCPF ), 11, '0');
	-- DBMS_OUTPUT.PUT_LINE('Recebido : ' || CPFSTRING );
	CPF.EXTEND(11);
	-- CARREGA O ARRAY COM AS POSIÃ‡Ã•ES DE CADA DÃ?GITO
	FOR I IN 1..11 LOOP
	   CPF(I) := SUBSTR( CPFSTRING,I,1);
	END LOOP;
	-- REALIZA O CÃ?LCULO DO PRIMEIRO DÃ?GITO VERIFICADOR
	FOR I IN 1..9 LOOP
	   DIGITO := DIGITO + (CPF(I) * (11 - I));
	END LOOP;
	
	-- DBMS_OUTPUT.PUT_LINE(' 1 Digito calculado : ' || (11 - MOD(DIGITO,11)));
	-- TESTA SE BATE COM O DÃ?GITO INFORMADO
	IF CPF(10) != CASE (11 - MOD(DIGITO,11)) WHEN 10 THEN 0 ELSE (11 - MOD(DIGITO,11)) END
		THEN RETURN 0;
	END IF;
	
	-- REALIZA O CÃ?LCULO DO SEGUNDO DÃ?GITO VERIFICADOR
	DIGITO := 0; -- ZERA A VARIAVEL
	FOR I IN 1..10 LOOP
	   DIGITO := DIGITO + (CPF(I) * (12 - I));
	END LOOP;
	-- DBMS_OUTPUT.PUT_LINE(' 2 Digito calculado : ' || (11 - MOD(DIGITO,11)));
	-- TESTA SE BATE COM O DÃ?GITO INFORMADO
	IF CPF(11) != CASE (11 - MOD(DIGITO,11)) WHEN 10 THEN 0 ELSE (11 - MOD(DIGITO,11)) END
		THEN RETURN 0;
	END IF;
	
RETURN 1;
 
END;
END;

PROCEDURE GET_TOTAL_NOTA (NUMERO_NOTA IN INTEGER) IS

   NUM_NOTA INTEGER;
   NM_CLI VARCHAR(150);
   EMISSAO DATE;
   TOTAL INTEGER;

BEGIN

   SELECT N.NR_NOTA_FISCAL, CLI.NOME_CLIENTE, N.DATA_EMISSAO, ((PN.QTD_VENDIDA * PN.VL_UNITARIO) * (1 - PN.PERC_DESCONTO/100)) AS PRECO_TOTAL
   INTO NUM_NOTA, NM_CLI, EMISSAO, TOTAL
   FROM NOTA_FISCAL N INNER JOIN PRODUTOS_NOTA PN
   ON N.NR_NOTA_FISCAL = PN.NR_NOTA_FISCAL
   INNER JOIN CLIENTE CLI
   ON N.IDCLIENTE = CLI.IDCLIENTE
   WHERE N.NR_NOTA_FISCAL = NUMERO_NOTA;

   INSERT INTO REL_NOTA (NR_NOTA_FISCAL, NOME_CLIENTE, DATA_EMISSAO, VALOR_TOTAL)
   VALUES (NUMERO_NOTA, NM_CLI, EMISSAO, TOTAL);

END GET_TOTAL_NOTA;

END VALIDADORES;
/

DROP PACKAGE BODY VALIDADORES;
